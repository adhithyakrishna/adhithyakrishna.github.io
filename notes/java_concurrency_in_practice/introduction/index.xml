<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Akrishna</title><link>https://adhithyakrishna.github.io/notes/java_concurrency_in_practice/introduction/</link><description>Recent content in Introduction on Akrishna</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Fri, 11 Nov 2022 12:01:27 -0800</lastBuildDate><atom:link href="https://adhithyakrishna.github.io/notes/java_concurrency_in_practice/introduction/index.xml" rel="self" type="application/rss+xml"/><item><title>Ch01 - Introduction</title><link>https://adhithyakrishna.github.io/notes/java_concurrency_in_practice/introduction/introduction/</link><pubDate>Fri, 28 Feb 2020 10:08:56 +0900</pubDate><guid>https://adhithyakrishna.github.io/notes/java_concurrency_in_practice/introduction/introduction/</guid><description>Contains Notes for the book Java concurrency in practice - https://jcip.net/)
Running a single program at a time was inefficient use of expensive and scarce computer resources
Processes Processes are isolated, independently executing programs to which operating system allocates resources such as memory, file handles and security credentials.
Processes communicate with one another through a variety of coarse-grained communication mechanism: sockets, signal handlers, shared memory, semaphores and fils.
Multi program execution Several motivating factors led to the development of OS that allowed multiple programs to execute simultaneously.</description></item></channel></rss>