<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on ZDoc</title><link>https://adhithyakrishna.github.io/articles/golang/</link><description>Recent content in Golang on ZDoc</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Mon, 01 Feb 2021 21:23:38 +0000</lastBuildDate><atom:link href="https://adhithyakrishna.github.io/articles/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Dependency injection in golang</title><link>https://adhithyakrishna.github.io/articles/golang/dependencyinjection/</link><pubDate>Mon, 01 Feb 2021 16:25:16 -0500</pubDate><guid>https://adhithyakrishna.github.io/articles/golang/dependencyinjection/</guid><description>This post was inspired by an awesome tech talk by Florian Patan at GopherCon UK in 2018 where he goes over creating a goservice in 30 minutes. The interesting take away from the talk was the use of dependency injection to insert a logger instance into the handler.
My aim for this article is to dissect dependency injection into smaller chunks to understand how it works.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 package main import ( &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;os&amp;#34; ) func main() { logger := log.</description></item></channel></rss>