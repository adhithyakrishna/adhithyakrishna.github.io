<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Adhithyakrishna on Akrishna</title><link>https://adhithyakrishna.github.io/</link><description>Recent content in Adhithyakrishna on Akrishna</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Sun, 26 Jan 2020 04:15:05 +0900</lastBuildDate><atom:link href="https://adhithyakrishna.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Most Common word</title><link>https://adhithyakrishna.github.io/articles/leetcode/leetcode819/</link><pubDate>Wed, 13 Jan 2021 15:01:46 +0000</pubDate><guid>https://adhithyakrishna.github.io/articles/leetcode/leetcode819/</guid><description>Solution for leetcode 819 Golang Java Golang solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 func mostCommonWord(paragraph string, banned []string) string { var sb strings.Builder bannedMap := make(map[string]bool) for _, data := range banned { bannedMap[data] = true } wordCounts := make(map[string]int) var max string for _, ch := range paragraph { if string(ch) == &amp;#34; &amp;#34; || string(ch) == &amp;#34;,&amp;#34; { if sb.</description></item><item><title>Squares of a sorted array</title><link>https://adhithyakrishna.github.io/articles/leetcode/leetcode977/</link><pubDate>Wed, 13 Jan 2021 03:30:51 +0000</pubDate><guid>https://adhithyakrishna.github.io/articles/leetcode/leetcode977/</guid><description>Solution for leetcode 977 Golang Java Golang solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 func sortedSquares(nums []int) []int { result := make([]int, len(nums)) start := 0 end := len(nums)-1 index := len(nums)-1 for start &amp;lt;= end { if(abs(nums[start]) &amp;gt;= abs(nums[end])) { result[index] = nums[start] * nums[start] start++ } else { result[index] = nums[end] * nums[end] end-- } index-- } return result } func abs(x int) int { if(x &amp;lt; 0) { return x * -1; } return x } Java solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public int[] sortedSquares(int[] nums) { int[] result = new int[nums.</description></item><item><title>Introduction</title><link>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/introduction/</link><pubDate>Sun, 23 Oct 2022 15:35:28 -0700</pubDate><guid>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/introduction/</guid><description>This notes is for the course Kuberenetes for absolute beginners
Introduction Container orchestration system = Container + Orchestration
What are containers Containers have their own processes, network and mounts Multiple containers can share the underlying operating system kernel. Docker (most popular container technology).
Problems before containers Application component and services being incompatible with underlying OS. Compatibility between services, libraries and dependencies on the OS. Compatability checks had to be make during every component upgrade AKA matrix from hell.</description></item><item><title>Dependency injection in golang</title><link>https://adhithyakrishna.github.io/articles/golang/dependencyinjection/</link><pubDate>Mon, 01 Feb 2021 16:25:16 -0500</pubDate><guid>https://adhithyakrishna.github.io/articles/golang/dependencyinjection/</guid><description>This post was inspired by an awesome tech talk by Florian Patan at GopherCon UK in 2018 where he goes over creating a goservice in 30 minutes. The interesting take away from the talk was the use of dependency injection to insert a logger instance into the handler.
My aim for this article is to dissect dependency injection into smaller chunks to understand how it works.
The initial code for the project is given below.</description></item><item><title>Ch01 - Introduction</title><link>https://adhithyakrishna.github.io/notes/java_concurrency_in_practice/introduction/introduction/</link><pubDate>Fri, 28 Feb 2020 10:08:56 +0900</pubDate><guid>https://adhithyakrishna.github.io/notes/java_concurrency_in_practice/introduction/introduction/</guid><description>Contains Notes for the book Java concurrency in practice - https://jcip.net/)
Running a single program at a time was inefficient use of expensive and scarce computer resources
Processes Processes are isolated, independently executing programs to which operating system allocates resources such as memory, file handles and security credentials.
Processes communicate with one another through a variety of coarse-grained communication mechanism: sockets, signal handlers, shared memory, semaphores and fils.</description></item><item><title>Ch01 - Thread Safety</title><link>https://adhithyakrishna.github.io/notes/java_concurrency_in_practice/fundamentals/thread_safety/</link><pubDate>Thu, 24 Nov 2022 10:39:40 -0800</pubDate><guid>https://adhithyakrishna.github.io/notes/java_concurrency_in_practice/fundamentals/thread_safety/</guid><description>Concurrency is more about achieving thread-safety, than it is about creating &amp;amp; managing threads. Those are mechanisms, but at its core, concurrency aims to encapsulate shared mutable state from uncontrolled concurrent access.
State of an object An object&amp;rsquo;s state encompasses any data that can affect its externally visible behavior. An object&amp;rsquo;s state is its data, stored in state variables such as instance or static fields.
An object&amp;rsquo;s state may include fields from other dependant objects.</description></item><item><title>Ch02 - Benefits of Threads</title><link>https://adhithyakrishna.github.io/notes/java_concurrency_in_practice/introduction/benefits_of_threads/</link><pubDate>Sun, 13 Nov 2022 14:50:54 -0800</pubDate><guid>https://adhithyakrishna.github.io/notes/java_concurrency_in_practice/introduction/benefits_of_threads/</guid><description>Contains Notes for the book Java concurrency in practice - https://jcip.net/)
Benefits of threads Proper utilization of thread can
Reduce development and maintenance cost. Improve the performance of complex applications. Threads are useful in GUI applications for improving the responsiveness of the user interface. In server applications, threads help in improving the resource utilzation and throughput.
Since the basic unit of scheduling is the thread. A single threaded program can run on at most one processor at a time.</description></item><item><title>Kubernetes architecture</title><link>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/k8s_architecture/</link><pubDate>Sun, 23 Oct 2022 15:35:28 -0700</pubDate><guid>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/k8s_architecture/</guid><description>This notes is for the course Kuberenetes for absolute beginners
Container orchestration Kubernetes is a Container Orchestration technology. Docker has its own container orchestraction - docker swarm. There is also MESOS from Apache.
The process of automatically deploying and managing containers (scaling up when load increases and scaling down when load decreases) is known as Container Orchestration.
Advantages of container orchestration
Application is highly available, since there are multiple instances of the application running on different nodes.</description></item><item><title>Embedding Interfaces</title><link>https://adhithyakrishna.github.io/articles/golang/embeddinginterfaces/</link><pubDate>Mon, 08 Feb 2021 01:22:47 -0500</pubDate><guid>https://adhithyakrishna.github.io/articles/golang/embeddinginterfaces/</guid><description>This article explains embedding interfaces concept in golang. We first begin by writing the main crux of the code.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 type Animal struct { Dog } type Dog struct { } func (d Dog) speak() { fmt.Println(&amp;#34;woof&amp;#34;) } func main() { d := Animal{Dog{}} d.speak(); v := Animal{} v.speak(); } In the above code we declare a type of struct named Dog.</description></item><item><title>Ch03 - Risks of threads</title><link>https://adhithyakrishna.github.io/notes/java_concurrency_in_practice/introduction/risks_of_threads/</link><pubDate>Wed, 16 Nov 2022 11:51:25 -0800</pubDate><guid>https://adhithyakrishna.github.io/notes/java_concurrency_in_practice/introduction/risks_of_threads/</guid><description>Contains Notes for the book Java concurrency in practice - https://jcip.net/)
In the absence of synchronization, the ordering of operations in multiple threads is unpredictable.
Safety Hazards 1 2 3 4 5 6 7 public class UnsafeSequence { private int value; /** Returns a unique value. */ public int getNext() { return value++; } } In the above example,value++ is three seperate operations.
Read the value Add one to it Wrie the new value.</description></item><item><title>Yaml Introduction</title><link>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/yaml_introduction/</link><pubDate>Tue, 01 Nov 2022 12:33:52 -0700</pubDate><guid>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/yaml_introduction/</guid><description>This notes is for the course Kuberenetes for absolute beginners
Yaml introduction According to yaml.org, &amp;ldquo;YAML is a human-friendly, data serialization standard for all programming languages.&amp;quot;
Yaml is used to create kubernetes configurations
Structure of YAML file Key Value Pair The basic type of entry in a YAML file is of a key value pair. After the Key and colon there is a space and then the value.</description></item><item><title>Chaining Interfaces</title><link>https://adhithyakrishna.github.io/articles/golang/chaininginterfaces/</link><pubDate>Mon, 08 Feb 2021 03:40:59 -0500</pubDate><guid>https://adhithyakrishna.github.io/articles/golang/chaininginterfaces/</guid><description>This article is a continuation to the previous article about Embedding interfaces found here
We start from the crux of the previous code.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import &amp;#34;fmt&amp;#34; type Animal struct { Language } type Dog struct {} func (d Dog) speak() { fmt.</description></item><item><title>Yaml for Kubernetes</title><link>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/yaml_for_k8s/</link><pubDate>Tue, 01 Nov 2022 12:41:20 -0700</pubDate><guid>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/yaml_for_k8s/</guid><description>This notes is for the course Kuberenetes for absolute beginners
Kubernetes definition file A Kubernetes definition file always contains 4 top level fields. These are required fields
apiVersion: kind: metadata: . . . spec: apiVersion - Version of k8s API kind - type of object (pod, replicaset, service, deployment) metadata - data about the object (name and label), it is in the form of a dictionary. Here name is a string value and labels is a dictionary.</description></item><item><title>Function types</title><link>https://adhithyakrishna.github.io/articles/golang/functiontypes/</link><pubDate>Mon, 08 Feb 2021 18:50:23 -0500</pubDate><guid>https://adhithyakrishna.github.io/articles/golang/functiontypes/</guid><description>Golang lets us declare a variable of type functions. In Golang functions are first class citizens. In this article we are going to see how the functions can be used a type in golang.
Declaration of the variable 1 type validator func(*User) error validator is the name of the variable that has a type function which takes the struct User as its argument and returns an error.</description></item><item><title>Kubernetes controllers</title><link>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/k8s_controllers/</link><pubDate>Thu, 03 Nov 2022 23:45:59 -0700</pubDate><guid>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/k8s_controllers/</guid><description>This notes is for the course Kuberenetes for absolute beginners
Replication controller Replication controller helps us run multiple instance of a pod in kubernetes cluster, thus providing high availability. Replication controller is capable of ensuring that the specified number of pods are running at all times. It is also capable of load balancing betweening multiple pods to share the loads. It can load balance pods and can do it when pods are in different nodes as well.</description></item><item><title>Kubernetes services</title><link>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/k8s_services/</link><pubDate>Sat, 05 Nov 2022 19:10:37 -0700</pubDate><guid>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/k8s_services/</guid><description>This notes is for the course Kuberenetes for absolute beginners
Kubernetes service enable communication between various components within or ourside of the application. Kubernetes Services helps us connect applications with other applications or users.
Services enable connectivity between the group of pods. For example front-end to the users, connection between the frontend and backend processes and backend to to external data source.
Services enable Loose coupling between microservices in our application.</description></item><item><title>Demo - Voting application 1</title><link>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/k8s_pods_demo/</link><pubDate>Fri, 11 Nov 2022 11:08:38 -0800</pubDate><guid>https://adhithyakrishna.github.io/notes/k8s_for_absolute_beginners/k8s_pods_demo/</guid><description>This notes is for the course Kuberenetes for absolute beginners
Application flow K8s Pods demo: https://www.udemy.com/course/learn-kubernetes/ Voting application We create pods and expose the container port. Please note that all the docker images are pre-built and this demo is to understand how different microservices communicate with each other through k8s services.
Create a definition for pod voting-app-pod.yml
apiVersion: v1 kind: Pod metadata: name: voting-app-pod labels: name: voting-app-pod app: demo-voting-app spec: containers: - name: voting-app image: dockersamples/examplevotingapp_vote imagePullPolicy: IfNotPresent ports: - containerPort: 80 restartPolicy: Always Create a Loadbalancer service to expose the application to external world voting-app-service.</description></item><item><title>Emoji Support</title><link>https://adhithyakrishna.github.io/blog/emoji-support/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>https://adhithyakrishna.github.io/blog/emoji-support/</guid><description>&lt;p>Lorem est tota propiore conpellat pectoribus de&lt;br />
pectora summo. Redit teque digerit hominumque toris verebor lumina non cervice&lt;br />
subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc&lt;br />
caluere tempus&lt;/p></description></item></channel></rss>