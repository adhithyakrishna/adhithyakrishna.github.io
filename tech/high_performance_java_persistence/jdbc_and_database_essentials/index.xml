<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JDBC and Database essentials on Akrishna</title><link>https://adhithyakrishna.github.io/tech/high_performance_java_persistence/jdbc_and_database_essentials/</link><description>Recent content in JDBC and Database essentials on Akrishna</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy;{year}, All Rights Reserved</copyright><atom:link href="https://adhithyakrishna.github.io/tech/high_performance_java_persistence/jdbc_and_database_essentials/index.xml" rel="self" type="application/rss+xml"/><item><title>JDBC connection management</title><link>https://adhithyakrishna.github.io/tech/high_performance_java_persistence/jdbc_and_database_essentials/jdbc_connection_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://adhithyakrishna.github.io/tech/high_performance_java_persistence/jdbc_and_database_essentials/jdbc_connection_management/</guid><description>This notes is for the book - High performance java persistence
The JDBC API provides common interface for communicating to the db server. To communicate to a db server, a Java program must first obtain a java.sql.connection.. java.sql.Driver is the actual db connection provider. java.sql.DriverManager provides the more convenience since it can also resolve the JDBC driver associated with the current db connection URL.
DriverManager Every time the getConnection() method is called, the driver manager will request a new physical connection from the underlying driver.</description></item></channel></rss>