<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fundamentals on Akrishna</title><link>https://adhithyakrishna.github.io/tech/java_concurrency_in_practice/fundamentals/</link><description>Recent content in Fundamentals on Akrishna</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy;{year}, All Rights Reserved</copyright><lastBuildDate>Thu, 24 Nov 2022 12:01:27 -0800</lastBuildDate><atom:link href="https://adhithyakrishna.github.io/tech/java_concurrency_in_practice/fundamentals/index.xml" rel="self" type="application/rss+xml"/><item><title>Ch01 - Thread Safety</title><link>https://adhithyakrishna.github.io/tech/java_concurrency_in_practice/fundamentals/thread_safety/</link><pubDate>Thu, 24 Nov 2022 10:39:40 -0800</pubDate><guid>https://adhithyakrishna.github.io/tech/java_concurrency_in_practice/fundamentals/thread_safety/</guid><description>Concurrency is more about achieving thread-safety, than it is about creating &amp;amp; managing threads. Those are mechanisms, but at its core, concurrency aims to encapsulate shared mutable state from uncontrolled concurrent access.
State of an object An object&amp;rsquo;s state encompasses any data that can affect its externally visible behavior. An object&amp;rsquo;s state is its data, stored in state variables such as instance or static fields.
An object&amp;rsquo;s state may include fields from other dependant objects.</description></item></channel></rss>