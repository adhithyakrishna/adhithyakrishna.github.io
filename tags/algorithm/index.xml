<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Algorithm on Adhithyakrishna</title><link>https://adhithyakrishna.github.io/tags/algorithm/</link><description>Recent content in Algorithm on Adhithyakrishna</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Sat, 12 Sep 2020 09:24:15 -0400</lastBuildDate><atom:link href="https://adhithyakrishna.github.io/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>KMP Pattern Matching Algorithm</title><link>https://adhithyakrishna.github.io/important-algorithms/kmp-pattern-matching/</link><pubDate>Sat, 12 Sep 2020 09:24:15 -0400</pubDate><guid>https://adhithyakrishna.github.io/important-algorithms/kmp-pattern-matching/</guid><description>KMP Algorithm I recently came across this awesome algorithm to locate a substring within a string. Let us consider a string s (small string) that has to be located in a large string l. A brute force approach would something like traverse the the larger list l until the start is matched with the small string s, and then use two pointers to traverse both the string. While this may seem like a good approach, consider a scenario where the length of s is 100 characters, 99 characters in the string l matches s but the last character doesn&amp;rsquo;t.</description></item></channel></rss>